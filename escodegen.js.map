{"version":3,"sources":["src/escodegen.js"],"names":[],"mappings":"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","file":"escodegen.js","sourcesContent":["/*\n  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>\n  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function () {\n    'use strict';\n\n    let SourceNode,\n        base,\n        indent,\n        json,\n        renumber,\n        hexadecimal,\n        quotes,\n        escapeless,\n        newline,\n        space,\n        parentheses,\n        semicolons,\n        safeConcatenation,\n        directive,\n        extra,\n        parse,\n        sourceMap,\n        sourceCode,\n        preserveBlankLines;\n\n    const estraverse = require('estraverse');\n    const esutils = require('esutils');\n\n    const { Syntax } = estraverse;\n\n    // Generation is done by generateExpression.\n    function isExpression(node) {\n        return Object.hasOwnProperty.call(CodeGenerator.Expression, node.type);\n    }\n\n    // Generation is done by generateStatement.\n    function isStatement(node) {\n        return Object.hasOwnProperty.call(CodeGenerator.Statement, node.type);\n    }\n\n    const Precedence = {\n        Sequence: 0,\n        Yield: 1,\n        Assignment: 1,\n        Conditional: 2,\n        ArrowFunction: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Exponentiation: 13,\n        Await: 14,\n        Unary: 14,\n        Postfix: 15,\n        Call: 16,\n        New: 17,\n        TaggedTemplate: 18,\n        Member: 19,\n        Primary: 20\n    };\n\n    const BinaryPrecedence = {\n        '||': Precedence.LogicalOR,\n        '&&': Precedence.LogicalAND,\n        '|': Precedence.BitwiseOR,\n        '^': Precedence.BitwiseXOR,\n        '&': Precedence.BitwiseAND,\n        '==': Precedence.Equality,\n        '!=': Precedence.Equality,\n        '===': Precedence.Equality,\n        '!==': Precedence.Equality,\n        is: Precedence.Equality,\n        isnt: Precedence.Equality,\n        '<': Precedence.Relational,\n        '>': Precedence.Relational,\n        '<=': Precedence.Relational,\n        '>=': Precedence.Relational,\n        in: Precedence.Relational,\n        instanceof: Precedence.Relational,\n        '<<': Precedence.BitwiseSHIFT,\n        '>>': Precedence.BitwiseSHIFT,\n        '>>>': Precedence.BitwiseSHIFT,\n        '+': Precedence.Additive,\n        '-': Precedence.Additive,\n        '*': Precedence.Multiplicative,\n        '%': Precedence.Multiplicative,\n        '/': Precedence.Multiplicative,\n        '**': Precedence.Exponentiation\n    };\n\n    //Flags\n    const F_ALLOW_IN = 1,\n        F_ALLOW_CALL = 1 << 1,\n        F_ALLOW_UNPARATH_NEW = 1 << 2,\n        F_FUNC_BODY = 1 << 3,\n        F_DIRECTIVE_CTX = 1 << 4,\n        F_SEMICOLON_OPT = 1 << 5;\n\n    //Expression flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_ALLOW_CALL\n    // F_ALLOW_UNPARATH_NEW\n    const E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,\n        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,\n        E_TFF = F_ALLOW_IN,\n        E_FFT = F_ALLOW_UNPARATH_NEW,\n        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;\n\n    //Statement flag sets\n    //NOTE: Flag order:\n    // F_ALLOW_IN\n    // F_FUNC_BODY\n    // F_DIRECTIVE_CTX\n    // F_SEMICOLON_OPT\n    const S_TFFF = F_ALLOW_IN,\n        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,\n        S_FFFF = 0x00,\n        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,\n        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;\n\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: '    ',\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                newline: '\\n',\n                space: ' ',\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: 'single',\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false,\n                preserveBlankLines: false\n            },\n            moz: {\n                comprehensionExpressionStartsWithAssignment: false,\n                starlessGenerator: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            raw: true,\n            verbatim: null,\n            sourceCode: null\n        };\n    }\n\n    function stringRepeat(str, num) {\n        let result = '';\n\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\n            if (num & 1) {\n                result += str;\n            }\n        }\n\n        return result;\n    }\n\n    function hasLineTerminator(str) {\n        return (/[\\r\\n]/g).test(str);\n    }\n\n    function endsWithLineTerminator(str) {\n        const len = str.length;\n        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));\n    }\n\n    function merge(target, override) {\n        for (const key in override) {\n            if (Object.hasOwnProperty.call(override, key)) {\n                target[key] = override[key];\n            }\n        }\n        return target;\n    }\n\n    function updateDeeply(target, override) {\n        function isHashObject(target) {\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n        }\n\n        for (const key in override) {\n            if (Object.hasOwnProperty.call(override, key)) {\n                const val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n\n    function generateNumber(value) {\n        if (value !== value) {\n            throw new Error('Numeric literal whose value is NaN');\n        }\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\n            throw new Error('Numeric literal whose value is negative');\n        }\n\n        if (value === 1 / 0) {\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\n        }\n\n        let result = `${value}`;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n\n        let point = result.indexOf('.');\n        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        let temp = result;\n        result = result.replace('e+', 'e');\n        let exponent = 0;\n        let pos;\n        if ((pos = temp.indexOf('e')) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = `${+(temp.slice(0, point) + temp.slice(point + 1))}`;\n        }\n        pos = 0;\n        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {\n            --pos;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += `e${exponent}`;\n        }\n        if ((temp.length < result.length ||\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = `0x${value.toString(16)}`).length < result.length)) &&\n                +temp === value) {\n            result = temp;\n        }\n\n        return result;\n    }\n\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n        }\n        return String.fromCharCode(ch);\n    }\n\n    function generateRegExp(reg) {\n        let result = reg.toString();\n\n        if (reg.source) {\n            // extract flag from toString result\n            const match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n\n            const [, flags] = match;\n            result = '';\n\n            let characterInBrack = false;\n            let previousIsBackslash = false;\n            for (const ch of reg.source) {\n                const code = ch.charCodeAt();\n\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (code === 93) {  // ]\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (code === 47) {  // /\n                            result += '\\\\';\n                        } else if (code === 91) {  // [\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(code, previousIsBackslash);\n                    previousIsBackslash = code === 92;  // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(code, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n\n            return `/${result}/${flags}`;\n        }\n\n        return result;\n    }\n\n    function escapeAllowedCharacter(code, next) {\n        if (code === 0x08  /* \\b */) {\n            return '\\\\b';\n        }\n\n        if (code === 0x0C  /* \\f */) {\n            return '\\\\f';\n        }\n\n        if (code === 0x09  /* \\t */) {\n            return '\\\\t';\n        }\n\n        const hex = code.toString(16).toUpperCase();\n        if (json || code > 0xFF) {\n            return `\\\\u${'0000'.slice(hex.length)}${hex}`;\n        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {\n            return '\\\\0';\n        } else if (code === 0x000B  /* \\v */) { // '\\v'\n            return '\\\\x0B';\n        } else {\n            return `\\\\x${'00'.slice(hex.length)}${hex}`;\n        }\n    }\n\n    function escapeDisallowedCharacter(code) {\n        if (code === 0x5C  /* \\ */) {\n            return '\\\\\\\\';\n        }\n\n        if (code === 0x0A  /* \\n */) {\n            return '\\\\n';\n        }\n\n        if (code === 0x0D  /* \\r */) {\n            return '\\\\r';\n        }\n\n        if (code === 0x2028) {\n            return '\\\\u2028';\n        }\n\n        if (code === 0x2029) {\n            return '\\\\u2029';\n        }\n\n        throw new Error('Incorrectly classified character');\n    }\n\n    function escapeDirective(str) {\n        let quote = quotes === 'double' ? '\"' : '\\'';\n        for (const [i, ch] of Object.entries(str)) {\n            const code = ch.charCodeAt();\n            if (code === 0x27  /* ' */) {\n                quote = '\"';\n                break;\n            } else if (code === 0x22  /* \" */) {\n                quote = '\\'';\n                break;\n            } else if (code === 0x5C  /* \\ */) {\n                ++i;\n            }\n        }\n\n        return quote + str + quote;\n    }\n\n    function escapeString(str) {\n        let result = '', singleQuotes = 0, doubleQuotes = 0;\n\n        for (const [i, ch] of Object.entries(str)) {\n            const code = ch.charCodeAt();\n            if (code === 0x27  /* ' */) {\n                ++singleQuotes;\n            } else if (code === 0x22  /* \" */) {\n                ++doubleQuotes;\n            } else if (code === 0x2F  /* / */ && json) {\n                result += '\\\\';\n            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \\ */) {\n                result += escapeDisallowedCharacter(code);\n                continue;\n            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20  /* SP */ || !json && !escapeless && (code < 0x20  /* SP */ || code > 0x7E  /* ~ */))) {\n                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n                continue;\n            }\n            result += String.fromCharCode(code);\n        }\n\n        const single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n        const quote = single ? '\\'' : '\"';\n\n        if (!(single ? singleQuotes : doubleQuotes)) {\n            return quote + result + quote;\n        }\n\n        str = result;\n        result = quote;\n\n        for (const ch of str) {\n            const code = ch.charCodeAt();\n            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* \" */ && !single)) {\n                result += '\\\\';\n            }\n            result += String.fromCharCode(code);\n        }\n\n        return result + quote;\n    }\n\n    /**\n     * flatten an array to a string, where the array can contain\n     * either strings or nested arrays\n     */\n    function flattenToString(arr) {\n        let result = '';\n        for (const elem of arr) {\n            result += Array.isArray(elem) ? flattenToString(elem) : elem;\n        }\n        return result;\n    }\n\n    /**\n     * convert generated to a SourceNode when source maps are enabled.\n     */\n    function toSourceNodeWhenNeeded(generated, node) {\n        if (!sourceMap) {\n            // with no source maps, generated is either an\n            // array or a string.  if an array, flatten it.\n            // if a string, just return it\n            if (Array.isArray(generated)) {\n                return flattenToString(generated);\n            } else {\n                return generated;\n            }\n        }\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);\n    }\n\n    function noEmptySpace() {\n        return (space) ? space : ' ';\n    }\n\n    function join(left, right) {\n        const leftSource = toSourceNodeWhenNeeded(left).toString();\n        if (leftSource.length === 0) {\n            return [right];\n        }\n\n        const rightSource = toSourceNodeWhenNeeded(right).toString();\n        if (rightSource.length === 0) {\n            return [left];\n        }\n\n        const leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n        const rightCharCode = rightSource.charCodeAt(0);\n\n        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||\n            esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) ||\n            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`\n            return [left, noEmptySpace(), right];\n        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||\n                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {\n            return [left, right];\n        }\n        return [left, space, right];\n    }\n\n    function addIndent(stmt) {\n        return [base, stmt];\n    }\n\n    function withIndent(fn) {\n        const previousBase = base;\n        base += indent;\n        fn(base);\n        base = previousBase;\n    }\n\n    function calculateSpaces(str) {\n        let i;\n        for (i = str.length - 1; i >= 0; --i) {\n            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {\n                break;\n            }\n        }\n        return (str.length - 1) - i;\n    }\n\n    function adjustMultilineComment(value, specialBase) {\n        const array = value.split(/\\r\\n|[\\r\\n]/);\n        let spaces = Number.MAX_VALUE;\n\n        // first line doesn't have indentation\n        for (let i = 1, len = array.length; i < len; ++i) {\n            const line = array[i];\n            let j = 0;\n            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {\n                ++j;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n\n        let previousBase;\n        if (typeof specialBase !== 'undefined') {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === '*') {\n                specialBase += ' ';\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                --spaces;\n            }\n            previousBase = base;\n        }\n\n        for (let i = 1, len = array.length; i < len; ++i) {\n            const sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\n            array[i] = sourceMap ? sn.join('') : sn;\n        }\n\n        base = previousBase;\n\n        return array.join('\\n');\n    }\n\n    function generateComment(comment, specialBase) {\n        if (comment.type === 'Line') {\n            if (endsWithLineTerminator(comment.value)) {\n                return `//${comment.value}`;\n            } else {\n                // Always use LineTerminator\n                let result = `//${comment.value}`;\n                if (!preserveBlankLines) {\n                    result += '\\n';\n                }\n                return result;\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment(`/*${comment.value}*/`, specialBase);\n        }\n        return `/*${comment.value}*/`;\n    }\n\n    function addComments(stmt, result) {\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            const save = result;\n\n            if (preserveBlankLines) {\n                const [comment] = stmt.leadingComments;\n                result = [];\n\n                const extRange = comment.extendedRange;\n                let { range } = comment;\n\n                const prefix = sourceCode.substring(extRange[0], range[0]);\n                let count = (prefix.match(/\\n/g) || []).length;\n                if (count > 0) {\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n\n                let prevRange = range;\n\n                for (let i = 1, len = stmt.leadingComments.length; i < len; i++) {\n                    const comment = stmt.leadingComments[i];\n                    ({ range } = comment);\n\n                    const infix = sourceCode.substring(prevRange[1], range[0]);\n                    const count = (infix.match(/\\n/g) || []).length;\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n\n                    prevRange = range;\n                }\n\n                const suffix = sourceCode.substring(range[1], extRange[1]);\n                count = (suffix.match(/\\n/g) || []).length;\n                result.push(stringRepeat('\\n', count));\n            } else {\n                const [comment] = stmt.leadingComments;\n                result = [];\n                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                    result.push('\\n');\n                }\n                result.push(generateComment(comment));\n                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push('\\n');\n                }\n\n                for (let i = 1, len = stmt.leadingComments.length; i < len; ++i) {\n                    const comment = stmt.leadingComments[i];\n                    const fragment = [generateComment(comment)];\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        fragment.push('\\n');\n                    }\n                    result.push(addIndent(fragment));\n                }\n            }\n\n            result.push(addIndent(save));\n        }\n\n        if (stmt.trailingComments) {\n\n            if (preserveBlankLines) {\n                const [comment] = stmt.trailingComments;\n                const extRange = comment.extendedRange;\n                const { range } = comment;\n\n                const prefix = sourceCode.substring(extRange[0], range[0]);\n                const count = (prefix.match(/\\n/g) || []).length;\n\n                if (count > 0) {\n                    result.push(stringRepeat('\\n', count));\n                    result.push(addIndent(generateComment(comment)));\n                } else {\n                    result.push(prefix);\n                    result.push(generateComment(comment));\n                }\n            } else {\n                const tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n                const specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));\n                for (let i = 0, len = stmt.trailingComments.length; i < len; ++i) {\n                    const comment = stmt.trailingComments[i];\n                    if (tailingToStatement) {\n                        // We assume target like following script\n                        //\n                        // var t = 20;  /**\n                        //               * This is comment of t\n                        //               */\n                        if (i === 0) {\n                            // first case\n                            result = [result, indent];\n                        } else {\n                            result = [result, specialBase];\n                        }\n                        result.push(generateComment(comment, specialBase));\n                    } else {\n                        result = [result, addIndent(generateComment(comment))];\n                    }\n                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result = [result, '\\n'];\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function generateBlankLines(start, end, result) {\n        let newlineCount = 0;\n\n        for (let j = start; j < end; j++) {\n            if (sourceCode[j] === '\\n') {\n                newlineCount++;\n            }\n        }\n\n        for (let j = 1; j < newlineCount; j++) {\n            result.push(newline);\n        }\n    }\n\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return ['(', text, ')'];\n        }\n        return text;\n    }\n\n    function generateVerbatimString(string) {\n        const result = string.split(/\\r\\n|\\n/);\n        for (let i = 1, iz = result.length; i < iz; i++) {\n            result[i] = newline + base + result[i];\n        }\n        return result;\n    }\n\n    function generateVerbatim(expr, precedence) {\n        const verbatim = expr[extra.verbatim];\n\n        let result;\n        if (typeof verbatim === 'string') {\n            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);\n        } else {\n            // verbatim is object\n            result = generateVerbatimString(verbatim.content);\n            const prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;\n            result = parenthesize(result, prec, precedence);\n        }\n\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n\n    function generateIdentifier(node) {\n        return toSourceNodeWhenNeeded(node.name, node);\n    }\n\n    function generateAsyncPrefix(node, spaceRequired) {\n        return node.async ? `async${spaceRequired ? noEmptySpace() : space}` : '';\n    }\n\n    function generateStarSuffix(node) {\n        const isGenerator = node.generator && !extra.moz.starlessGenerator;\n        return isGenerator ? `*${space}` : '';\n    }\n\n    function generateMethodPrefix(prop) {\n        const func = prop.value;\n        let prefix = '';\n        if (func.async) {\n            prefix += generateAsyncPrefix(func, !prop.computed);\n        }\n        if (func.generator) {\n            // avoid space before method name\n            prefix += generateStarSuffix(func) ? '*' : '';\n        }\n        return prefix;\n    }\n\n    class CodeGenerator {\n        // Helpers.\n\n        maybeBlock (stmt, flags) {\n            const that = this;\n\n            const noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n            if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n                return [space, this.generateStatement(stmt, flags)];\n            }\n\n            if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n                return ';';\n            }\n\n            let result;\n            withIndent(function () {\n                result = [\n                    newline,\n                    addIndent(that.generateStatement(stmt, flags))\n                ];\n            });\n\n            return result;\n        }\n\n        maybeBlockSuffix (stmt, result) {\n            const ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n            if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n                return [result, space];\n            }\n            if (ends) {\n                return [result, base];\n            }\n            return [result, newline, base];\n        }\n\n        generatePattern (node, precedence, flags) {\n            if (node.type === Syntax.Identifier) {\n                return generateIdentifier(node);\n            }\n            return this.generateExpression(node, precedence, flags);\n        }\n\n        generateFunctionParams (node) {\n            let result;\n            let hasDefault = false;\n\n            if (node.type === Syntax.ArrowFunctionExpression &&\n                    !node.rest && (!node.defaults || node.defaults.length === 0) &&\n                    node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\n                // arg => { } case\n                result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];\n            } else {\n                result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];\n                result.push('(');\n                if (node.defaults) {\n                    hasDefault = true;\n                }\n                for (let i = 0, iz = node.params.length; i < iz; ++i) {\n                    if (hasDefault && node.defaults[i]) {\n                        // Handle default values.\n                        result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));\n                    } else {\n                        result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));\n                    }\n                    if (i + 1 < iz) {\n                        result.push(`,${space}`);\n                    }\n                }\n\n                if (node.rest) {\n                    if (node.params.length) {\n                        result.push(`,${space}`);\n                    }\n                    result.push('...');\n                    result.push(generateIdentifier(node.rest));\n                }\n\n                result.push(')');\n            }\n\n            return result;\n        }\n\n        generateFunctionBody (node) {\n            const result = this.generateFunctionParams(node);\n\n            if (node.type === Syntax.ArrowFunctionExpression) {\n                result.push(space);\n                result.push('=>');\n            }\n\n            if (node.expression) {\n                result.push(space);\n                let expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);\n                if (expr.toString().charAt(0) === '{') {\n                    expr = ['(', expr, ')'];\n                }\n                result.push(expr);\n            } else {\n                result.push(this.maybeBlock(node.body, S_TTFF));\n            }\n\n            return result;\n        }\n\n        generateIterationForStatement (operator, stmt, flags) {\n            const that = this;\n            let result = [`for${stmt.await ? `${noEmptySpace()}await` : ''}${space}(`];\n            withIndent(function () {\n                if (stmt.left.type === Syntax.VariableDeclaration) {\n                    withIndent(function () {\n                        result.push(stmt.left.kind + noEmptySpace());\n                        result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));\n                    });\n                } else {\n                    result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));\n                }\n\n                result = join(result, operator);\n                result = [join(\n                    result,\n                    that.generateExpression(stmt.right, Precedence.Assignment, E_TTT)\n                ), ')'];\n            });\n            result.push(this.maybeBlock(stmt.body, flags));\n            return result;\n        }\n\n        generatePropertyKey (expr, computed) {\n            const result = [];\n\n            if (computed) {\n                result.push('[');\n            }\n\n            result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));\n\n            if (computed) {\n                result.push(']');\n            }\n\n            return result;\n        }\n\n        generateAssignment (left, right, operator, precedence, flags) {\n            if (Precedence.Assignment < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n\n            return parenthesize(\n                [\n                    this.generateExpression(left, Precedence.Call, flags),\n                    space + operator + space,\n                    this.generateExpression(right, Precedence.Assignment, flags)\n                ],\n                Precedence.Assignment,\n                precedence\n            );\n        }\n\n        semicolon (flags) {\n            if (!semicolons && flags & F_SEMICOLON_OPT) {\n                return '';\n            }\n            return ';';\n        }\n\n        generateExpression (expr, precedence, flags) {\n            const type = expr.type || Syntax.Property;\n\n            if (extra.verbatim && Object.hasOwnProperty.call(expr, extra.verbatim)) {\n                return generateVerbatim(expr, precedence);\n            }\n\n            let result = this[type](expr, precedence, flags);\n\n            if (extra.comment) {\n                result = addComments(expr, result);\n            }\n            return toSourceNodeWhenNeeded(result, expr);\n        }\n\n        generateStatement (stmt, flags) {\n            let result = this[stmt.type](stmt, flags);\n\n            // Attach comments\n\n            if (extra.comment) {\n                result = addComments(stmt, result);\n            }\n\n            const fragment = toSourceNodeWhenNeeded(result).toString();\n            if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\n                result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, '') : fragment.replace(/\\s+$/, '');\n            }\n\n            return toSourceNodeWhenNeeded(result, stmt);\n        }\n    }\n\n    // Statements.\n\n    CodeGenerator.Statement = {\n\n        BlockStatement (stmt, flags) {\n            const that = this;\n            let result = ['{', newline];\n\n            withIndent(function () {\n                // handle functions without any code\n                if (stmt.body.length === 0 && preserveBlankLines) {\n                    const { range } = stmt;\n                    if (range[1] - range[0] > 2) {\n                        const content = sourceCode.substring(range[0] + 1, range[1] - 1);\n                        if (content[0] === '\\n') {\n                            result = ['{'];\n                        }\n                        result.push(content);\n                    }\n                }\n\n                let bodyFlags = S_TFFF;\n                if (flags & F_FUNC_BODY) {\n                    bodyFlags |= F_DIRECTIVE_CTX;\n                }\n\n                for (let i = 0, iz = stmt.body.length; i < iz; ++i) {\n                    if (preserveBlankLines) {\n                        // handle spaces before the first line\n                        if (i === 0) {\n                            if (stmt.body[0].leadingComments) {\n                                const range = stmt.body[0].leadingComments[0].extendedRange;\n                                const content = sourceCode.substring(range[0], range[1]);\n                                if (content[0] === '\\n') {\n                                    result = ['{'];\n                                }\n                            }\n                            if (!stmt.body[0].leadingComments) {\n                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);\n                            }\n                        }\n\n                        // handle spaces between lines\n                        if (i > 0) {\n                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) {\n                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                            }\n                        }\n                    }\n\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n\n                    let fragment;\n                    if (stmt.body[i].leadingComments && preserveBlankLines) {\n                        fragment = that.generateStatement(stmt.body[i], bodyFlags);\n                    } else {\n                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));\n                    }\n\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        if (preserveBlankLines && i < iz - 1) {\n                            // don't add a new line if there are leading coments\n                            // in the next statement\n                            if (!stmt.body[i + 1].leadingComments) {\n                                result.push(newline);\n                            }\n                        } else {\n                            result.push(newline);\n                        }\n                    }\n\n                    if (preserveBlankLines) {\n                        // handle spaces after the last line\n                        if (i === iz - 1) {\n                            if (!stmt.body[i].trailingComments) {\n                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                            }\n                        }\n                    }\n                }\n            });\n\n            result.push(addIndent('}'));\n            return result;\n        },\n\n        BreakStatement (stmt, flags) {\n            if (stmt.label) {\n                return `break ${stmt.label.name}${this.semicolon(flags)}`;\n            }\n            return `break${this.semicolon(flags)}`;\n        },\n\n        ContinueStatement (stmt, flags) {\n            if (stmt.label) {\n                return `continue ${stmt.label.name}${this.semicolon(flags)}`;\n            }\n            return `continue${this.semicolon(flags)}`;\n        },\n\n        ClassBody (stmt, flags) {\n            const result = [ '{', newline], that = this;\n\n            withIndent(function (indent) {\n                for (let i = 0, iz = stmt.body.length; i < iz; ++i) {\n                    result.push(indent);\n                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(newline);\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            return result;\n        },\n\n        ClassDeclaration (stmt, flags) {\n            let result  = ['class'];\n            if (stmt.id) {\n                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));\n            }\n            if (stmt.superClass) {\n                const fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Unary, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(stmt.body, S_TFFT));\n            return result;\n        },\n\n        DirectiveStatement (stmt, flags) {\n            if (extra.raw && stmt.raw) {\n                return stmt.raw + this.semicolon(flags);\n            }\n            return escapeDirective(stmt.directive) + this.semicolon(flags);\n        },\n\n        DoWhileStatement (stmt, flags) {\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            let result = join('do', this.maybeBlock(stmt.body, S_TFFF));\n            result = this.maybeBlockSuffix(stmt.body, result);\n            return join(result, [\n                `while${space}(`,\n                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                `)${this.semicolon(flags)}`\n            ]);\n        },\n\n        CatchClause (stmt, flags) {\n            const that = this;\n            let result;\n            withIndent(function () {\n                if (stmt.param) {\n                    result = [\n                        `catch${space}(`,\n                        that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),\n                        ')'\n                    ];\n\n                    if (stmt.guard) {\n                        const guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);\n                        result.splice(2, 0, ' if ', guard);\n                    }\n                } else {\n                    result = ['catch'];\n                }\n            });\n            result.push(this.maybeBlock(stmt.body, S_TFFF));\n            return result;\n        },\n\n        DebuggerStatement (stmt, flags) {\n            return `debugger${this.semicolon(flags)}`;\n        },\n\n        EmptyStatement (stmt, flags) {\n            return ';';\n        },\n\n        ExportDefaultDeclaration (stmt, flags) {\n            let result = [ 'export' ];\n\n            const bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;\n\n            // export default HoistableDeclaration[Default]\n            // export default AssignmentExpression[In] ;\n            result = join(result, 'default');\n            if (isStatement(stmt.declaration)) {\n                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            } else {\n                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));\n            }\n            return result;\n        },\n\n        ExportNamedDeclaration (stmt, flags) {\n            const that = this;\n            let result = [ 'export' ];\n\n            const bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;\n\n            // export VariableStatement\n            // export Declaration[Default]\n            if (stmt.declaration) {\n                return join(result, this.generateStatement(stmt.declaration, bodyFlags));\n            }\n\n            // export ExportClause[NoReference] FromClause ;\n            // export ExportClause ;\n            if (stmt.specifiers) {\n                if (stmt.specifiers.length === 0) {\n                    result = join(result, `{${space}}`);\n                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {\n                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));\n                } else {\n                    result = join(result, '{');\n                    withIndent(function (indent) {\n                        result.push(newline);\n                        for (let i = 0, iz = stmt.specifiers.length; i < iz; ++i) {\n                            result.push(indent);\n                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                            if (i + 1 < iz) {\n                                result.push(`,${newline}`);\n                            }\n                        }\n                    });\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                        result.push(newline);\n                    }\n                    result.push(`${base}}`);\n                }\n\n                if (stmt.source) {\n                    result = join(result, [\n                        `from${space}`,\n                        // ModuleSpecifier\n                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                        this.semicolon(flags)\n                    ]);\n                } else {\n                    result.push(this.semicolon(flags));\n                }\n            }\n            return result;\n        },\n\n        ExportAllDeclaration (stmt, flags) {\n            // export * FromClause ;\n            return [\n                `export${space}`,\n                `*${space}`,\n                `from${space}`,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ];\n        },\n\n        ExpressionStatement (stmt, flags) {\n            function isClassPrefixed(fragment) {\n                if (fragment.slice(0, 5) !== 'class') {\n                    return false;\n                }\n                const code = fragment.charCodeAt(5);\n                return code === 0x7B  /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);\n            }\n\n            function isFunctionPrefixed(fragment) {\n                if (fragment.slice(0, 8) !== 'function') {\n                    return false;\n                }\n                const code = fragment.charCodeAt(8);\n                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);\n            }\n\n            function isAsyncPrefixed(fragment) {\n                if (fragment.slice(0, 5) !== 'async') {\n                    return false;\n                }\n                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {\n                    return false;\n                }\n                let i, iz;\n                for (i = 6, iz = fragment.length; i < iz; ++i) {\n                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {\n                        break;\n                    }\n                }\n                if (i === iz) {\n                    return false;\n                }\n                if (fragment.slice(i, i + 8) !== 'function') {\n                    return false;\n                }\n                const code = fragment.charCodeAt(i + 8);\n                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);\n            }\n\n            let result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];\n            // 12.4 '{', 'function', 'class' is not allowed in this position.\n            // wrap expression with parentheses\n            const fragment = toSourceNodeWhenNeeded(result).toString();\n            if (fragment.charCodeAt(0) === 0x7B  /* '{' */ ||  // ObjectExpression\n                    isClassPrefixed(fragment) ||\n                    isFunctionPrefixed(fragment) ||\n                    isAsyncPrefixed(fragment) ||\n                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\n                result = ['(', result, `)${this.semicolon(flags)}`];\n            } else {\n                result.push(this.semicolon(flags));\n            }\n            return result;\n        },\n\n        ImportDeclaration (stmt, flags) {\n            // ES6: 15.2.1 valid import declarations:\n            //     - import ImportClause FromClause ;\n            //     - import ModuleSpecifier ;\n            const that = this;\n\n            // If no ImportClause is present,\n            // this should be `import ModuleSpecifier` so skip `from`\n            // ModuleSpecifier is StringLiteral.\n            if (stmt.specifiers.length === 0) {\n                // import ModuleSpecifier ;\n                return [\n                    'import',\n                    space,\n                    // ModuleSpecifier\n                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                    this.semicolon(flags)\n                ];\n            }\n\n            // import ImportClause FromClause ;\n            let result = [\n                'import'\n            ];\n            let cursor = 0;\n\n            // ImportedBinding\n            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {\n                result = join(result, [\n                    this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                ]);\n                ++cursor;\n            }\n\n            if (stmt.specifiers[cursor]) {\n                if (cursor !== 0) {\n                    result.push(',');\n                }\n\n                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {\n                    // NameSpaceImport\n                    result = join(result, [\n                        space,\n                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)\n                    ]);\n                } else {\n                    // NamedImports\n                    result.push(`${space}{`);\n\n                    if ((stmt.specifiers.length - cursor) === 1) {\n                        // import { ... } from \"...\";\n                        result.push(space);\n                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));\n                        result.push(`${space}}${space}`);\n                    } else {\n                        // import {\n                        //    ...,\n                        //    ...,\n                        // } from \"...\";\n                        withIndent(function (indent) {\n                            result.push(newline);\n                            for (let i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {\n                                result.push(indent);\n                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));\n                                if (i + 1 < iz) {\n                                    result.push(`,${newline}`);\n                                }\n                            }\n                        });\n                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                            result.push(newline);\n                        }\n                        result.push(`${base}}${space}`);\n                    }\n                }\n            }\n\n            result = join(result, [\n                `from${space}`,\n                // ModuleSpecifier\n                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),\n                this.semicolon(flags)\n            ]);\n            return result;\n        },\n\n        VariableDeclarator (stmt, flags) {\n            const itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;\n            if (stmt.init) {\n                return [\n                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),\n                    space,\n                    '=',\n                    space,\n                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)\n                ];\n            }\n            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);\n        },\n\n        VariableDeclaration (stmt, flags) {\n            // VariableDeclarator is typed as Statement,\n            // but joined with comma (not LineTerminator).\n            // So if comment is attached to target node, we should specialize.\n            const that = this;\n\n            const result = [ stmt.kind ];\n\n            const bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;\n\n            function block() {\n                const [node] = stmt.declarations;\n                if (extra.comment && node.leadingComments) {\n                    result.push('\\n');\n                    result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                } else {\n                    result.push(noEmptySpace());\n                    result.push(that.generateStatement(node, bodyFlags));\n                }\n\n                for (let i = 1, iz = stmt.declarations.length; i < iz; ++i) {\n                    const node = stmt.declarations[i];\n                    if (extra.comment && node.leadingComments) {\n                        result.push(`,${newline}`);\n                        result.push(addIndent(that.generateStatement(node, bodyFlags)));\n                    } else {\n                        result.push(`,${space}`);\n                        result.push(that.generateStatement(node, bodyFlags));\n                    }\n                }\n            }\n\n            if (stmt.declarations.length > 1) {\n                withIndent(block);\n            } else {\n                block();\n            }\n\n            result.push(this.semicolon(flags));\n\n            return result;\n        },\n\n        ThrowStatement (stmt, flags) {\n            return [join(\n                'throw',\n                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)\n            ), this.semicolon(flags)];\n        },\n\n        TryStatement (stmt, flags) {\n            let result = ['try', this.maybeBlock(stmt.block, S_TFFF)];\n            result = this.maybeBlockSuffix(stmt.block, result);\n\n            if (stmt.handlers) {\n                // old interface\n                for (let i = 0, iz = stmt.handlers.length; i < iz; ++i) {\n                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);\n                    }\n                }\n            } else {\n                const guardedHandlers = stmt.guardedHandlers || [];\n\n                for (let i = 0, iz = guardedHandlers.length; i < iz; ++i) {\n                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));\n                    if (stmt.finalizer || i + 1 !== iz) {\n                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);\n                    }\n                }\n\n                // new interface\n                if (stmt.handler) {\n                    if (Array.isArray(stmt.handler)) {\n                        for (let i = 0, iz = stmt.handler.length; i < iz; ++i) {\n                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));\n                            if (stmt.finalizer || i + 1 !== iz) {\n                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);\n                            }\n                        }\n                    } else {\n                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));\n                        if (stmt.finalizer) {\n                            result = this.maybeBlockSuffix(stmt.handler.body, result);\n                        }\n                    }\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);\n            }\n            return result;\n        },\n\n        SwitchStatement (stmt, flags) {\n            const that = this;\n            let result;\n            withIndent(function () {\n                result = [\n                    `switch${space}(`,\n                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),\n                    `)${space}{${newline}`\n                ];\n            });\n            if (stmt.cases) {\n                let bodyFlags = S_TFFF;\n                for (let i = 0, iz = stmt.cases.length; i < iz; ++i) {\n                    if (i === iz - 1) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    const fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent('}'));\n            return result;\n        },\n\n        SwitchCase (stmt, flags) {\n            const that = this;\n            let result;\n            withIndent(function () {\n                if (stmt.test) {\n                    result = [\n                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),\n                        ':'\n                    ];\n                } else {\n                    result = ['default:'];\n                }\n\n                let i = 0;\n                const iz = stmt.consequent.length;\n                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    const fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);\n                    result.push(fragment);\n                    i = 1;\n                }\n\n                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push(newline);\n                }\n\n                let bodyFlags = S_TFFF;\n                for (; i < iz; ++i) {\n                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {\n                        bodyFlags |= F_SEMICOLON_OPT;\n                    }\n                    const fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));\n                    result.push(fragment);\n                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            return result;\n        },\n\n        IfStatement (stmt, flags) {\n            const that = this;\n            let result;\n            withIndent(function () {\n                result = [\n                    `if${space}(`,\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            const semicolonOptional = flags & F_SEMICOLON_OPT;\n            let bodyFlags = S_TFFF;\n            if (semicolonOptional) {\n                bodyFlags |= F_SEMICOLON_OPT;\n            }\n            if (stmt.alternate) {\n                result.push(this.maybeBlock(stmt.consequent, S_TFFF));\n                result = this.maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);\n                } else {\n                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));\n                }\n            } else {\n                result.push(this.maybeBlock(stmt.consequent, bodyFlags));\n            }\n            return result;\n        },\n\n        ForStatement (stmt, flags) {\n            const that = this;\n            let result;\n            withIndent(function () {\n                result = [`for${space}(`];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(that.generateStatement(stmt.init, S_FFFF));\n                    } else {\n                        // F_ALLOW_IN becomes false.\n                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));\n                        result.push(';');\n                    }\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.test) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));\n                    result.push(';');\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.update) {\n                    result.push(space);\n                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));\n                    result.push(')');\n                } else {\n                    result.push(')');\n                }\n            });\n\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n\n        ForInStatement (stmt, flags) {\n            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n\n        ForOfStatement (stmt, flags) {\n            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);\n        },\n\n        LabeledStatement (stmt, flags) {\n            return [`${stmt.label.name}:`, this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];\n        },\n\n        Program (stmt, flags) {\n            const iz = stmt.body.length;\n            const result = [safeConcatenation && iz > 0 ? '\\n' : ''];\n            let bodyFlags = S_TFTF;\n            for (let i = 0; i < iz; ++i) {\n                if (!safeConcatenation && i === iz - 1) {\n                    bodyFlags |= F_SEMICOLON_OPT;\n                }\n\n                if (preserveBlankLines) {\n                    // handle spaces before the first line\n                    if (i === 0) {\n                        if (!stmt.body[0].leadingComments) {\n                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);\n                        }\n                    }\n\n                    // handle spaces between lines\n                    if (i > 0) {\n                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {\n                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);\n                        }\n                    }\n                }\n\n                const fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));\n                result.push(fragment);\n                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    if (preserveBlankLines) {\n                        if (!stmt.body[i + 1].leadingComments) {\n                            result.push(newline);\n                        }\n                    } else {\n                        result.push(newline);\n                    }\n                }\n\n                if (preserveBlankLines) {\n                    // handle spaces after the last line\n                    if (i === iz - 1) {\n                        if (!stmt.body[i].trailingComments) {\n                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);\n                        }\n                    }\n                }\n            }\n            return result;\n        },\n\n        FunctionDeclaration (stmt, flags) {\n            return [\n                generateAsyncPrefix(stmt, true),\n                'function',\n                generateStarSuffix(stmt) || noEmptySpace(),\n                stmt.id ? generateIdentifier(stmt.id) : '',\n                this.generateFunctionBody(stmt)\n            ];\n        },\n\n        ReturnStatement (stmt, flags) {\n            if (stmt.argument) {\n                return [join(\n                    'return',\n                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)\n                ), this.semicolon(flags)];\n            }\n            return [`return${this.semicolon(flags)}`];\n        },\n\n        WhileStatement (stmt, flags) {\n            const that = this;\n            let result;\n            withIndent(function () {\n                result = [\n                    `while${space}(`,\n                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        },\n\n        WithStatement (stmt, flags) {\n            const that = this;\n            let result;\n            withIndent(function () {\n                result = [\n                    `with${space}(`,\n                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),\n                    ')'\n                ];\n            });\n            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));\n            return result;\n        }\n\n    };\n\n    merge(CodeGenerator.prototype, CodeGenerator.Statement);\n\n    // Expressions.\n\n    CodeGenerator.Expression = {\n\n        SequenceExpression (expr, precedence, flags) {\n            if (Precedence.Sequence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            const result = [];\n            for (let i = 0, iz = expr.expressions.length; i < iz; ++i) {\n                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));\n                if (i + 1 < iz) {\n                    result.push(`,${space}`);\n                }\n            }\n            return parenthesize(result, Precedence.Sequence, precedence);\n        },\n\n        AssignmentExpression (expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);\n        },\n\n        ArrowFunctionExpression (expr, precedence, flags) {\n            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\n        },\n\n        ConditionalExpression (expr, precedence, flags) {\n            if (Precedence.Conditional < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n            return parenthesize(\n                [\n                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),\n                    `${space}?${space}`,\n                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),\n                    `${space}:${space}`,\n                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)\n                ],\n                Precedence.Conditional,\n                precedence\n            );\n        },\n\n        LogicalExpression (expr, precedence, flags) {\n            return this.BinaryExpression(expr, precedence, flags);\n        },\n\n        BinaryExpression (expr, precedence, flags) {\n            const currentPrecedence = BinaryPrecedence[expr.operator];\n            const leftPrecedence = expr.operator === '**' ? Precedence.Postfix : currentPrecedence;\n            const rightPrecedence = expr.operator === '**' ? currentPrecedence : currentPrecedence + 1;\n\n            if (currentPrecedence < precedence) {\n                flags |= F_ALLOW_IN;\n            }\n\n            let fragment = this.generateExpression(expr.left, leftPrecedence, flags);\n\n            const leftSource = fragment.toString();\n\n            let result;\n            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {\n                result = [fragment, noEmptySpace(), expr.operator];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n\n            fragment = this.generateExpression(expr.right, rightPrecedence, flags);\n\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||\n            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n                result.push(noEmptySpace());\n                result.push(fragment);\n            } else {\n                result = join(result, fragment);\n            }\n\n            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {\n                return ['(', result, ')'];\n            }\n            return parenthesize(result, currentPrecedence, precedence);\n        },\n\n        CallExpression (expr, precedence, flags) {\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            const result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];\n            result.push('(');\n            for (let i = 0, iz = expr['arguments'].length; i < iz; ++i) {\n                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));\n                if (i + 1 < iz) {\n                    result.push(`,${space}`);\n                }\n            }\n            result.push(')');\n\n            if (!(flags & F_ALLOW_CALL)) {\n                return ['(', result, ')'];\n            }\n            return parenthesize(result, Precedence.Call, precedence);\n        },\n\n        NewExpression (expr, precedence, flags) {\n            const { length } = expr['arguments'];\n\n            // F_ALLOW_CALL becomes false.\n            // F_ALLOW_UNPARATH_NEW may become false.\n            const itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;\n\n            const result = join(\n                'new',\n                this.generateExpression(expr.callee, Precedence.New, itemFlags)\n            );\n\n            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {\n                result.push('(');\n                for (let i = 0, iz = length; i < iz; ++i) {\n                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(`,${space}`);\n                    }\n                }\n                result.push(')');\n            }\n\n            return parenthesize(result, Precedence.New, precedence);\n        },\n\n        MemberExpression (expr, precedence, flags) {\n            // F_ALLOW_UNPARATH_NEW becomes false.\n            const result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];\n\n            if (expr.computed) {\n                result.push('[');\n                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));\n                result.push(']');\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\n                    const fragment = toSourceNodeWhenNeeded(result).toString();\n                    // When the following conditions are all true,\n                    //   1. No floating point\n                    //   2. Don't have exponents\n                    //   3. The last character is a decimal digit\n                    //   4. Not hexadecimal OR octal number literal\n                    // we should add a floating point.\n                    if (\n                        fragment.indexOf('.') < 0 &&\n                            !/[eExX]/.test(fragment) &&\n                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&\n                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'\n                    ) {\n                        result.push(' ');\n                    }\n                }\n                result.push('.');\n                result.push(generateIdentifier(expr.property));\n            }\n\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n\n        MetaProperty (expr, precedence, flags) {\n            const result = [\n                typeof expr.meta === 'string' ? expr.meta : generateIdentifier(expr.meta),\n                '.',\n                typeof expr.property === 'string' ? expr.property : generateIdentifier(expr.property)\n            ];\n            return parenthesize(result, Precedence.Member, precedence);\n        },\n\n        UnaryExpression (expr, precedence, flags) {\n            const fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);\n\n            let result;\n            if (space === '') {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [expr.operator];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    const leftSource = toSourceNodeWhenNeeded(result).toString();\n                    const leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n                    const rightCharCode = fragment.toString().charCodeAt(0);\n\n                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||\n                            (esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode))) {\n                        result.push(noEmptySpace());\n                        result.push(fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            return parenthesize(result, Precedence.Unary, precedence);\n        },\n\n        YieldExpression (expr, precedence, flags) {\n            let result;\n            if (expr.delegate) {\n                result = 'yield*';\n            } else {\n                result = 'yield';\n            }\n            if (expr.argument) {\n                result = join(\n                    result,\n                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)\n                );\n            }\n            return parenthesize(result, Precedence.Yield, precedence);\n        },\n\n        AwaitExpression (expr, precedence, flags) {\n            const result = join(\n                expr.all ? 'await*' : 'await',\n                this.generateExpression(expr.argument, Precedence.Await, E_TTT)\n            );\n            return parenthesize(result, Precedence.Await, precedence);\n        },\n\n        UpdateExpression (expr, precedence, flags) {\n            if (expr.prefix) {\n                return parenthesize(\n                    [\n                        expr.operator,\n                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)\n                    ],\n                    Precedence.Unary,\n                    precedence\n                );\n            }\n            return parenthesize(\n                [\n                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),\n                    expr.operator\n                ],\n                Precedence.Postfix,\n                precedence\n            );\n        },\n\n        FunctionExpression (expr, precedence, flags) {\n            const result = [\n                generateAsyncPrefix(expr, true),\n                'function'\n            ];\n            if (expr.id) {\n                result.push(generateStarSuffix(expr) || noEmptySpace());\n                result.push(generateIdentifier(expr.id));\n            } else {\n                result.push(generateStarSuffix(expr) || space);\n            }\n            result.push(this.generateFunctionBody(expr));\n            return result;\n        },\n\n        ArrayPattern (expr, precedence, flags) {\n            return this.ArrayExpression(expr, precedence, flags, true);\n        },\n\n        ArrayExpression (expr, precedence, flags, isPattern) {\n            const that = this;\n            if (!expr.elements.length) {\n                return '[]';\n            }\n            const multiline = isPattern ? false : expr.elements.length > 1;\n            const result = ['[', multiline ? newline : ''];\n            withIndent(function (indent) {\n                for (let i = 0, iz = expr.elements.length; i < iz; ++i) {\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === iz) {\n                            result.push(',');\n                        }\n                    } else {\n                        result.push(multiline ? indent : '');\n                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));\n                    }\n                    if (i + 1 < iz) {\n                        result.push(`,${multiline ? newline : space}`);\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push(']');\n            return result;\n        },\n\n        RestElement(expr, precedence, flags) {\n            return `...${this.generatePattern(expr.argument)}`;\n        },\n\n        ClassExpression (expr, precedence, flags) {\n            let result = ['class'];\n            if (expr.id) {\n                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));\n            }\n            if (expr.superClass) {\n                const fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Unary, E_TTT));\n                result = join(result, fragment);\n            }\n            result.push(space);\n            result.push(this.generateStatement(expr.body, S_TFFT));\n            return result;\n        },\n\n        MethodDefinition (expr, precedence, flags) {\n            let result;\n            if (expr['static']) {\n                result = [`static${space}`];\n            } else {\n                result = [];\n            }\n            let fragment;\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                fragment = [\n                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),\n                    this.generateFunctionBody(expr.value)\n                ];\n            } else {\n                fragment = [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n            return join(result, fragment);\n        },\n\n        Property (expr, precedence, flags) {\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                return [\n                    expr.kind, noEmptySpace(),\n                    this.generatePropertyKey(expr.key, expr.computed),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n\n            if (expr.shorthand) {\n                if (expr.value.type === 'AssignmentPattern') {\n                    return this.AssignmentPattern(expr.value, Precedence.Sequence, E_TTT);\n                }\n                return this.generatePropertyKey(expr.key, expr.computed);\n            }\n\n            if (expr.method) {\n                return [\n                    generateMethodPrefix(expr),\n                    this.generatePropertyKey(expr.key, expr.computed),\n                    this.generateFunctionBody(expr.value)\n                ];\n            }\n\n            return [\n                this.generatePropertyKey(expr.key, expr.computed),\n                `:${space}`,\n                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)\n            ];\n        },\n\n        ObjectExpression (expr, precedence, flags) {\n            const that = this;\n\n            if (!expr.properties.length) {\n                return '{}';\n            }\n            const multiline = expr.properties.length > 1;\n\n            let fragment;\n            withIndent(function () {\n                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);\n            });\n\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    return [ '{', space, fragment, space, '}' ];\n                }\n            }\n\n            let result;\n            withIndent(function (indent) {\n                result = [ '{', newline, indent, fragment ];\n\n                if (multiline) {\n                    result.push(`,${newline}`);\n                    for (let i = 1, iz = expr.properties.length; i < iz; ++i) {\n                        result.push(indent);\n                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                        if (i + 1 < iz) {\n                            result.push(`,${newline}`);\n                        }\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            return result;\n        },\n\n        AssignmentPattern(expr, precedence, flags) {\n            return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);\n        },\n\n        ObjectPattern (expr, precedence, flags) {\n            const that = this;\n            if (!expr.properties.length) {\n                return '{}';\n            }\n\n            let multiline = false;\n            if (expr.properties.length === 1) {\n                const [property] = expr.properties;\n                if (property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for (const property of expr.properties) {\n                    if (!property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            const result = ['{', multiline ? newline : '' ];\n\n            withIndent(function (indent) {\n                for (let i = 0, iz = expr.properties.length; i < iz; ++i) {\n                    result.push(multiline ? indent : '');\n                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));\n                    if (i + 1 < iz) {\n                        result.push(`,${multiline ? newline : space}`);\n                    }\n                }\n            });\n\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push('}');\n            return result;\n        },\n\n        ThisExpression (expr, precedence, flags) {\n            return 'this';\n        },\n\n        Super (expr, precedence, flags) {\n            return 'super';\n        },\n\n        Identifier (expr, precedence, flags) {\n            return generateIdentifier(expr);\n        },\n\n        ImportDefaultSpecifier (expr, precedence, flags) {\n            return generateIdentifier(expr.id || expr.local);\n        },\n\n        ImportNamespaceSpecifier (expr, precedence, flags) {\n            const result = ['*'];\n            const id = expr.id || expr.local;\n            if (id) {\n                result.push(`${space}as${noEmptySpace()}${generateIdentifier(id)}`);\n            }\n            return result;\n        },\n\n        ImportSpecifier (expr, precedence, flags) {\n            const { imported } = expr;\n            const result = [ imported.name ];\n            const { local } = expr;\n            if (local && local.name !== imported.name) {\n                result.push(`${noEmptySpace()}as${noEmptySpace()}${generateIdentifier(local)}`);\n            }\n            return result;\n        },\n\n        ExportSpecifier (expr, precedence, flags) {\n            const { local } = expr;\n            const result = [ local.name ];\n            const { exported } = expr;\n            if (exported && exported.name !== local.name) {\n                result.push(`${noEmptySpace()}as${noEmptySpace()}${generateIdentifier(exported)}`);\n            }\n            return result;\n        },\n\n        Literal (expr, precedence, flags) {\n            if (Object.hasOwnProperty.call(expr, 'raw') && parse && extra.raw) {\n                try {\n                    const raw = parse(expr.raw).body[0].expression;\n                    if (raw.type === Syntax.Literal) {\n                        if (raw.value === expr.value) {\n                            return expr.raw;\n                        }\n                    }\n                } catch (e) {\n                    // not use raw property\n                }\n            }\n\n            if (expr.regex) {\n                return `/${expr.regex.pattern}/${expr.regex.flags}`;\n            }\n\n            if (expr.value === null) {\n                return 'null';\n            }\n\n            if (typeof expr.value === 'string') {\n                return escapeString(expr.value);\n            }\n\n            if (typeof expr.value === 'number') {\n                return generateNumber(expr.value);\n            }\n\n            if (typeof expr.value === 'boolean') {\n                return expr.value ? 'true' : 'false';\n            }\n\n            return generateRegExp(expr.value);\n        },\n\n        GeneratorExpression (expr, precedence, flags) {\n            return this.ComprehensionExpression(expr, precedence, flags);\n        },\n\n        ComprehensionExpression (expr, precedence, flags) {\n            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\n\n            const that = this;\n            let result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];\n\n            let fragment;\n            if (extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n                result.push(fragment);\n            }\n\n            if (expr.blocks) {\n                withIndent(function () {\n                    for (let i = 0, iz = expr.blocks.length; i < iz; ++i) {\n                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);\n                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {\n                            result = join(result, fragment);\n                        } else {\n                            result.push(fragment);\n                        }\n                    }\n                });\n            }\n\n            if (expr.filter) {\n                result = join(result, `if${space}`);\n                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);\n                result = join(result, [ '(', fragment, ')' ]);\n            }\n\n            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);\n\n                result = join(result, fragment);\n            }\n\n            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');\n            return result;\n        },\n\n        ComprehensionBlock (expr, precedence, flags) {\n            let fragment;\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind, noEmptySpace(),\n                    this.generateStatement(expr.left.declarations[0], S_FFFF)\n                ];\n            } else {\n                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);\n            }\n\n            fragment = join(fragment, expr.of ? 'of' : 'in');\n            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));\n\n            return [ `for${space}(`, fragment, ')' ];\n        },\n\n        SpreadElement (expr, precedence, flags) {\n            return [\n                '...',\n                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)\n            ];\n        },\n\n        TaggedTemplateExpression (expr, precedence, flags) {\n            let itemFlags = E_TTF;\n            if (!(flags & F_ALLOW_CALL)) {\n                itemFlags = E_TFF;\n            }\n            const result = [\n                this.generateExpression(expr.tag, Precedence.Call, itemFlags),\n                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)\n            ];\n            return parenthesize(result, Precedence.TaggedTemplate, precedence);\n        },\n\n        TemplateElement (expr, precedence, flags) {\n            // Don't use \"cooked\". Since tagged template can use raw template\n            // representation. So if we do so, it breaks the script semantics.\n            return expr.value.raw;\n        },\n\n        TemplateLiteral (expr, precedence, flags) {\n            const result = [ '`' ];\n            for (let i = 0, iz = expr.quasis.length; i < iz; ++i) {\n                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));\n                if (i + 1 < iz) {\n                    result.push(`\\${${space}`);\n                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));\n                    result.push(`${space}}`);\n                }\n            }\n            result.push('`');\n            return result;\n        },\n\n        ModuleSpecifier (expr, precedence, flags) {\n            return this.Literal(expr, precedence, flags);\n        },\n\n        ImportExpression(expr, precedence, flag) {\n            return parenthesize([\n                'import(',\n                this.generateExpression(expr.source, Precedence.Assignment, E_TTT),\n                ')'\n            ], Precedence.Call, precedence);\n        },\n\n    };\n\n    merge(CodeGenerator.prototype, CodeGenerator.Expression);\n\n    function generateInternal(node) {\n        const codegen = new CodeGenerator();\n        if (isStatement(node)) {\n            return codegen.generateStatement(node, S_TFFF);\n        }\n\n        if (isExpression(node)) {\n            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);\n        }\n\n        throw new Error(`Unknown node type: ${node.type}`);\n    }\n\n    function generate(node, options) {\n        const defaultOptions = getDefaultOptions();\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === 'string') {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === 'number') {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === 'string') {\n                ({ base } = options);\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        ({\n            json, renumber, escapeless, newline,\n            space, parentheses, semicolons, safeConcatenation\n        } = options.format);\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? 'double' : options.format.quotes;\n        if (options.format.compact) {\n            newline = space = indent = base = '';\n        }\n        ({ directive, sourceMap, sourceCode } = options);\n        parse = json ? null : options.parse;\n        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;\n        extra = options;\n\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                ({ SourceNode } = require('source-map'));\n            } else {\n                ({ SourceNode } = global.sourceMap);\n            }\n        }\n\n        const result = generateInternal(node);\n\n        let pair;\n\n        if (!sourceMap) {\n            pair = { code: result.toString(), map: null };\n            return options.sourceMapWithCode ? pair : pair.code;\n        }\n\n\n        pair = result.toStringWithSourceMap({\n            file: options.file,\n            sourceRoot: options.sourceMapRoot\n        });\n\n        if (options.sourceContent) {\n            pair.map.setSourceContent(options.sourceMap,\n                options.sourceContent);\n        }\n\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n\n        return pair.map.toString();\n    }\n\n    const FORMAT_MINIFY = {\n        indent: {\n            style: '',\n            base: 0\n        },\n        renumber: true,\n        hexadecimal: true,\n        quotes: 'auto',\n        escapeless: true,\n        compact: true,\n        parentheses: false,\n        semicolons: false\n    };\n\n    const FORMAT_DEFAULTS = getDefaultOptions().format;\n\n    exports.version = require('./package.json').version;\n    exports.generate = generate;\n    exports.attachComments = estraverse.attachComments;\n    exports.Precedence = updateDeeply({}, Precedence);\n    exports.browser = false;\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n"]}